using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Minipede.Rendering
{
    [RequireComponent( typeof( CompositeCollider2D ) )]
    public class TilemapShadowCaster2D : MonoBehaviour
    {
        [SerializeField] private uint _colliderHash;
        [SerializeField] private bool _useRendererSilhouette = false;
        [SerializeField] private bool _selfShadows = false;
        [SerializeField] private int _applyToSortingLayers = -1;

        private CompositeCollider2D _compositeCollider;

        private void Awake()
        {
            _compositeCollider = GetComponent<CompositeCollider2D>();
        }

        private void Update()
        {
            uint shapeHash = _compositeCollider.GetShapeHash();
            if ( shapeHash == _colliderHash )
            {
                return;
            }

			_colliderHash = shapeHash;
            ReinitializeShapes();
        }

        public void ReinitializeShapes()
        {
            RemoveCurrentShadows();

            for ( int i = 0; i < _compositeCollider.pathCount; i++ )
            {
                List<Vector2> points = new List<Vector2>();
                _compositeCollider.GetPath( i, points );

                GameObject go = new GameObject( "AutogeneratedShadowPath", typeof( MeshRenderer ) );
                go.transform.parent = transform;

                PathShadow path = go.AddComponent<PathShadow>();
                path.useRendererSilhouette = _useRendererSilhouette;
                path.selfShadows = _selfShadows;
                path.SetShape( points, GetLayers() );
            }
        }

        private void RemoveCurrentShadows()
        {
            //new List<PathShadow>( GetComponentsInChildren<PathShadow>() )
            //    .ConvertAll( comp => comp.transform.gameObject )
            //    .ForEach( gameObject =>
            //    {
            //        if ( Application.isEditor )
            //        {
            //            DestroyImmediate( gameObject );
            //        }
            //        else
            //        {
            //            Destroy( gameObject );
            //        }
            //    } );
            var childShadows = GetComponentsInChildren<PathShadow>();
            foreach ( var shadow in childShadows )
			{
                Destroy( shadow.gameObject );
			}
        }

        private int[] GetLayers()
        {
			int[] values = SortingLayer.layers.Select( layer => layer.id ).ToArray();
			List<int> sortingLayers = new List<int>();
			int propCount = 0;
			for ( int i = 0; i < values.Length; i++ )
			{
				int layer = 1 << i;
				if ( (_applyToSortingLayers & layer) != 0 )
				{
					sortingLayers.Add( values[propCount] );
					propCount++;
				}
			}
			int[] layerArray = sortingLayers.ToArray();
			return layerArray;
		}

        private void OnDestroy()
        {
            RemoveCurrentShadows();
        }
	}
}
